"""
Set of "markup" template filters for Django.  These filters transform plain text
markup syntaxes to HTML; currently there is support for:

    * Textile, which requires the PyTextile library available at
      http://loopcore.com/python-textile/

    * Markdown, which requires the Python-markdown library from
      http://www.freewisdom.org/projects/python-markdown

    * reStructuredText, which requires docutils from http://docutils.sf.net/
"""
import six
import warnings

from docutils.core import publish_parts
from django import template
from django.conf import settings
from django.utils.safestring import mark_safe
from django.utils.encoding import smart_str
if six.PY2:
    from django.utils.encoding import force_unicode
else:
    from django.utils.encoding import force_str as force_unicode

register = template.Library()

@register.filter(is_safe=True)
def textile(value):
    try:
        import textile
    except ImportError:
        if settings.DEBUG:
            raise template.TemplateSyntaxError("Error in 'textile' filter: The Python textile library isn't installed.")
        return force_unicode(value)
    else:
        return mark_safe(force_unicode(textile.textile(smart_str(value), encoding='utf-8', output='utf-8')))

@register.filter(is_safe=True)
def mymarkdown(value, arg=''):
    """
    Runs Markdown over a given value, optionally using various
    extensions python-markdown supports.

    Syntax::

        {{ value|markdown:"extension1_name,extension2_name..." }}

    To enable safe mode, which strips raw HTML and only returns HTML
    generated by actual Markdown syntax, pass "safe" as the first
    extension in the list.

    If the version of Markdown in use does not support extensions,
    they will be silently ignored.

    """
    try:
        import markdown
    except ImportError:
        if settings.DEBUG:
            raise template.TemplateSyntaxError("Error in 'markdown' filter: The Python markdown library isn't installed.")
        return force_unicode(value)
    else:
        extensions = [e for e in arg.split(",") if e]
        if len(extensions) > 0 and extensions[0] == "safe":
            extensions = extensions[1:]
            return mark_safe(markdown.markdown(force_unicode(value), extensions=extensions, safe_mode=True, enable_attributes=False))
        else:
            return mark_safe(markdown.markdown(force_unicode(value), extensions=extensions, safe_mode=False))


@register.filter(is_safe=True)
def restructuredtext(value, idprefix='id'):
    docutils_settings = {
        'raw_enabled': False,
        'file_insertion_enabled': False,
        'tab_width': 2,
        'id_prefix': idprefix,
        # 'datestamp': ' %Y-%m-%d %H:%M',
        # 'language_code': 'zh-hans',
    }
    parts = publish_parts(source=smart_str(value), writer_name="html4css1", settings_overrides=docutils_settings)
    return mark_safe(force_unicode(parts['html_body']))
